generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  phone_number   String    @unique
  email          String    @unique
  password_hash  String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt

  // Relations
  ridesAsCustomer Ride[]       @relation("CustomerRides")
  payments       Payment[]
  transactions   TransactionLog[]
  support_tickets SupportTicket[]
  wallet         Wallet?
}

model Captain {
  id             Int      @id @default(autoincrement())
  name           String
  phone_number   String   @unique
  email          String   @unique
  password_hash  String
  license_number String
  current_status String   @default("available") // available | on_ride | offline
  current_vehicle_id Int? // Foreign key to current active vehicle
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  // Relations
  rides Ride[]
  vehicles Vehicle[] // All vehicles owned by this captain
  current_vehicle Vehicle? @relation("CurrentVehicle", fields: [current_vehicle_id], references: [id])
}

model Ride {
  id           Int       @id @default(autoincrement())
  pickup       String
  dropoff      String
  status       String    @default("requested") // requested | accepted | ongoing | completed | cancelled
  fare         Float     @default(0)
  created_at   DateTime  @default(now())
  started_at   DateTime?
  ended_at     DateTime?

  pickup_lat   Float
  pickup_lng   Float
  drop_lat     Float
  drop_lng     Float

  // Vehicle information
  requested_vehicle_type String @default("car") // car | auto | bike | suv | truck | van
  vehicle_id   Int? // Foreign key to Vehicle table

  // Foreign keys
  customer_id  Int
  captain_id   Int?

  // Relations
  customer     User      @relation("CustomerRides", fields: [customer_id], references: [id])
  captain      Captain?  @relation(fields: [captain_id], references: [id])
  vehicle      Vehicle?  @relation(fields: [vehicle_id], references: [id])
  support_tickets SupportTicket[]
  transactions   TransactionLog[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  status    String
  method    String
  created_at DateTime @default(now())

  user_id   Int
  user      User     @relation(fields: [user_id], references: [id])
}

model SupportTicket {
  id        Int      @id @default(autoincrement())
  message   String
  status    String   // "open" | "closed"
  created_at DateTime @default(now())

  user_id   Int
  ride_id   Int?

  user      User      @relation(fields: [user_id], references: [id])
  ride      Ride?     @relation(fields: [ride_id], references: [id])
}

model TransactionLog {
  id        Int      @id @default(autoincrement())
  amount    Float
  status    String
  created_at DateTime @default(now())

  ride_id   Int?
  user_id   Int?

  ride      Ride?    @relation(fields: [ride_id], references: [id])
  user      User?    @relation(fields: [user_id], references: [id])
}

model Vehicle {
  id             Int      @id @default(autoincrement())
  captain_id     Int
  vehicle_type   String   // car | auto | bike | suv | truck | van
  make           String   // Toyota, Honda, Bajaj, etc.
  model          String   // Camry, City, Pulsar, etc.
  year           Int?     // 2020, 2021, etc.
  color          String   // Red, Blue, White, etc.
  plate_number   String   // License plate number
  capacity       Int      @default(4) // Number of passengers
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  // Relations
  captain Captain @relation(fields: [captain_id], references: [id])
  current_captains Captain[] @relation("CurrentVehicle")
  rides Ride[]
}

model Wallet {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique
  balance   Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user      User     @relation(fields: [user_id], references: [id])
}
